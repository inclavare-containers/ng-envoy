syntax = "proto3";

package envoy.extensions.transport_sockets.tls.v3;

import "google/protobuf/empty.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.transport_sockets.tls.v3";
option java_outer_classname = "RatsTlsProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3;tlsv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

message RatsTlsCertGeneratorConfig {
  oneof attester {
    CocoAttesterConfig coco_attester = 1;
  }
}

message CocoAttesterConfig {
  // The ttrpc unix domain socket address of attestation-agent to connect to.
  string aa_addr = 1;

  oneof attest_mode {
    // Put CoCo evidence (generated by attestation-agent) in cert.
    google.protobuf.Empty evidence_mode = 2;

    // Get CoCo evidence from attestation-agent, then convert it to CoCo attestation token and put it in cert.
    CocoAttesterTokenModeConfig token_mode = 3;
  }
}

message CocoAttesterTokenModeConfig {
  // The Grpc address of CoCo Attestation Service.
  string as_addr = 1;

  // The policy ids used by AS to evaluate evidence.
  repeated string policy_ids = 2 [(validate.rules).repeated = {min_items: 1 max_items: 16}];
}

message RatsTlsCertValidatorConfig {
  // Represents the different verification policies that can be applied to certificates.
  oneof verifier {
    // Verify with CoCo policies. Should be used only when peer is using CoCo Attester.
    CocoVerifierConfig coco_verifier = 1;
  }
}

message CocoVerifierConfig {
  oneof verify_mode {
    // Expect to receive a CoCo evidence (generated by attestation-agent from attester side) and verify it with CoCo attestation-service.
    CocoVerifierEvidenceModeConfig evidence_mode = 1;

    // Expect to receive a CoCo token and verify the token directly.
    google.protobuf.Empty token_mode = 2;
  }

  // The policy ids needed to check.
  repeated string policy_ids = 3 [(validate.rules).repeated = {min_items: 1 max_items: 16}];

  //  The path of all trusted certs to be used for checking CoCo AS token.
  repeated string trusted_certs_paths = 4 [(validate.rules).repeated = {max_items: 8}];
}

message CocoVerifierEvidenceModeConfig {
  // The Grpc address of CoCo Attestation Service.
  string as_addr = 1;
}
